#include <Pop/Validate.hpp>
#include <Pop/AST.hpp>
#include <Pop/Logger.hpp>
#include <Pop/Visitor.hpp>
#include <cassert>
#include <vector>

namespace Pop {

  struct JumpStmtVisitor final : public VisitorBase {
    Logger &log;
    std::vector<bool> breakables;
    std::vector<bool> continuables;
    std::vector<bool> returnables;
    JumpStmtVisitor(Logger &log) : log(log) {
      breakables.push_back(false);
      continuables.push_back(false);
      returnables.push_back(false);
    }
    void begin_breakable() {
      breakables.push_back(true);
    }
    void end_breakable() {
      breakables.pop_back();
    }
    bool breakable() const {
      if (!breakables.empty())
        return breakables.back();
      return false;
    }
    void begin_continuable() {
      continuables.push_back(true);
    }
    void end_continuable() {
      continuables.pop_back();
    }
    bool continuable() const {
      if (!continuables.empty())
        return continuables.back();
      return false;
    }
    void begin_returnable() {
      returnables.push_back(true);
    }
    void end_returnable() {
      returnables.pop_back();
    }
    bool returnable() const {
      if (!returnables.empty())
        return returnables.back();
      return false;
    }
{%- for node in nodes %}
  {%- if node.name in [ "Do", "While", "For" ] %}
    void visit({{ node.name }} &n) final {
    {%- if node.child_fields | length > 0 %}
      begin_breakable();
      begin_continuable();
      {%- for field in node.child_fields %}
      if (n.{{ field.name }})
        n.{{ field.name }}->accept(*this);
      {%- endfor %}
      end_continuable();
      end_breakable();
    {%- else %}
      (void)n;
    {%- endif %}
    }
  {%- elif node.name == "Case" %}
    void visit({{ node.name }} &n) final {
    {%- if node.child_fields | length > 0 %}
      begin_breakable();
      {%- for field in node.child_fields %}
      if (n.{{ field.name }})
        n.{{ field.name }}->accept(*this);
      {%- endfor %}
      end_breakable();
    {%- else %}
      (void)n;
    {%- endif %}
    }
  {%- elif node.name == "Function" %}
    void visit({{ node.name }} &n) final {
    {%- if node.child_fields | length > 0 %}
      begin_returnable();
      {%- for field in node.child_fields %}
      if (n.{{ field.name }})
        n.{{ field.name }}->accept(*this);
      {%- endfor %}
      end_returnable();
    {%- endif %}
    }
  {%- elif node.name == "Continue" %}
    void visit({{ node.name }} &n) final {
      if (!continuable()) {
        log.error(n.file(), n.line(), n.column(),
          "continue statement in wrong context");
      }
    }
  {%- elif node.name == "Break" %}
    void visit({{ node.name }} &n) final {
      if (!breakable()) {
        log.error(n.file(), n.line(), n.column(),
          "break statement in wrong context");
      }
    }
  {%- elif node.name == "Return" %}
    void visit({{ node.name }} &n) final {
      if (!returnable()) {
        log.error(n.file(), n.line(), n.column(),
          "return statement in wrong context");
      }
    }
  {%- else %}
    void visit({{ node.name }} &n) final {
    {%- if node.child_fields | length > 0 %}
      {%- for field in node.child_fields %}
      if (n.{{ field.name }})
        n.{{ field.name }}->accept(*this);
      {%- endfor %}
    {%- else %}
      (void)n;
    {%- endif %}
    }
  {%- endif %}
{%- endfor %}
  };

  void validate(Node *root, Logger &log) {
    assert(root);
    JumpStmtVisitor visitor(log);
    root->accept(visitor);
  }

  // namespace Pop
}
