#ifndef POP_AST_HPP
#define POP_AST_HPP

#include <Pop/Operators.hpp>
#include <Pop/SymbolTable.hpp>
#include <Pop/TypeInfo.hpp>
#include <Pop/Visitor.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

namespace Pop {

  enum NodeKind : std::uint8_t {
    NK_NODELIST,
{%- for node in nodes %}
    NK_{{ node.name | upper }},
{%- endfor %}
  };

  struct Node;
  typedef std::vector<Node*> NodeVector;

  struct Location {
    const char *file;
    int line, column;
    Location(const char *file="", int line=-1, int column=-1)
      : file(file), line(line), column(column) {
    }
  };

  struct Node {
    NodeKind kind;
    Node *parent;
    SymbolTable *enclosing_scope;
    Node(const Node&) = delete;
    Node(Node&&) = delete;
    Node& operator=(const Node&) = delete;
    Node& operator=(Node&&) = delete;
    virtual ~Node() = default;
    const char *file() const { return location.file?location.file:""; }
    void file(const char *f) { location.file = f?f:""; }
    int line() const { return location.line; }
    void line(int l) { location.line = l; }
    int column() const { return location.column; }
    void column(int c) { location.column = c; }
    Node *ref() {
      ref_count++;
      return this;
    }
    Node *unref() {
      ref_count--;
      if (ref_count == 0) {
        delete this;
        return nullptr;
      }
      return this;
    }
    virtual void accept(VisitorBase&) = 0;
    virtual const std::string &type_name() const = 0;
  protected:
    Node(NodeKind kind, const char *fn="", int line=-1, int column=-1)
      : kind(kind), parent(nullptr), enclosing_scope(nullptr),
        ref_count(1), location(fn, line, column) {
    }
  private:
    unsigned long long int ref_count;
    Location location;
  };

  template< class T >
  inline T *node_ref(T *n) {
    if (n)
      return static_cast<T*>(n->ref());
    return nullptr;
  }

  template< class T >
  inline T *node_unref(T *n) {
    if (n)
      return static_cast<T*>(n->unref());
    return nullptr;
  }

  struct NodeList final : public Node {
    NodeVector elements;
    NodeList(const NodeList&) = delete;
    NodeList(NodeList&&) = delete;
    NodeList& operator=(const NodeList&) = delete;
    NodeList& operator=(NodeList&&) = delete;
    NodeList(const char *fn="", int line=-1, int column=-1)
      : Node(NK_NODELIST, fn, line, column) {
    }
    NodeList(const char *fn, int line, int column, Node *first)
      : Node(NK_NODELIST, fn, line, column) {
      append_take(first);
    }
    ~NodeList() final {
      for (auto child : elements)
        node_unref(child);
    }
    void append_take(Node *n) {
      elements.push_back(n);
    }
    void append(Node *n) {
      append_take(node_ref(n));
    }
    void accept(VisitorBase &v) final {
      v.visit(*this);
    }
    const std::string &type_name() const final {
      static const std::string s = "NodeList";
      return s;
    }
    static bool classof(const Node *n) {
      return (n->kind == NK_NODELIST);
    }
  };
{% for node in nodes %}
  struct {{ node.name }} final : public Node {
  {%- for field in node.fields %}
    {{ field.type }} {{ field.name }};
  {%- endfor %}
  {{ node.name }}(const {{ node.name }}&) = delete;
  {{ node.name }}({{ node.name }}&&) = delete;
  {{ node.name }}& operator=(const {{ node.name }}&) = delete;
  {{ node.name }}& operator=({{ node.name }}&&) = delete;
  {{ node.name }}(const char *fn="", int line=-1, int column=-1)
    : Node(NK_{{ node.name | upper }}, fn, line, column){% for field in node.fields -%}
        {%- if field.default is not none -%}
          ,{{ field.name }}({{ field.default }})
        {%- elif field.child -%}
          ,{{ field.name }}(nullptr)
        {%- endif -%}
      {%- endfor %}  {
  }
  {%- if node.construct_fields | length > 0 %}
  {{ node.name }}(const char *fn, int line, int column, {% for field in node.construct_fields -%}
        {{ field.type }} {{ field.name }}
        {%- if loop.index < node.construct_fields | length %}, {% endif %}
      {%- endfor %})
    : Node(NK_{{ node.name | upper }}, fn, line, column), {% for field in node.construct_fields -%}
        {%- if field.type == "std::string" -%}
          {{ field.name }}(std::move({{ field.name }}))
        {%- else -%}
          {{ field.name }}({{ field.name }})
        {%- endif -%}
        {%- if loop.index < node.construct_fields | length %}, {% endif %}
      {%- endfor %} {
  }
  {% if node.construct_fields | length == 1 %}explicit {% endif -%}
  {{ node.name }}({% for field in node.construct_fields %}{{ field.type }} {{ field.name }}{% if loop.index < node.construct_fields | length %}, {% endif %}{% endfor %})
    : Node(NK_{{ node.name | upper }}, nullptr, -1, -1), {% for field in node.construct_fields -%}
        {%- if field.type == "std::string" -%}
          {{ field.name }}(std::move({{ field.name }}))
        {%- else -%}
          {{ field.name }}({{ field.name }})
        {%- endif -%}
        {%- if loop.index < node.construct_fields | length %}, {% endif %}
      {%- endfor %} {
  }
  {%- endif %}
  {%- if node.child_fields | length > 0 %}
    ~{{ node.name }}() final {
    {%- for field in node.child_fields %}
      node_unref({{ field.name }});
    {%- endfor %}
    }
  {%- endif %}
    void accept(VisitorBase &v) final {
      v.visit(*this);
    }
    const std::string &type_name() const final {
      static const std::string s = "{{ node.name }}";
      return s;
    }
    static bool classof(const Node *n) {
      return (n->kind == NK_{{ node.name | upper }});
    }
  };
{% endfor %}

  template<class T, class... Args>
  inline T* make_node(Args&& ...args) {
    return new T(std::forward<Args>(args)...);
  }

// namespace Pop
}

#endif // POP_AST_HPP
