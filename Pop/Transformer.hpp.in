#ifndef POP_TRANSFORMER_HPP
#define POP_TRANSFORMER_HPP

namespace Pop {

  struct Node;
  struct NodeList;
{%- for node in nodes %}
  struct {{ node.name }};
{%- endfor %}

  struct TransformerBase {
    virtual ~TransformerBase() {}
    virtual Node *transform(NodeList*) = 0;
{%- for node in nodes %}
    virtual Node *transform({{ node.name }}*) = 0;
{%- endfor %}
  };

  struct OrderedTransformer : public TransformerBase {
    virtual Node *process(NodeList*) = 0;
{%- for node in nodes %}
    virtual Node *process({{ node.name }}*) = 0;
{%- endfor %}
  };

  struct PreOrderTransformer : public OrderedTransformer {
    Node *transform(NodeList *n) override;
{%- for node in nodes %}
    Node *transform({{ node.name }} *n) override;
{%- endfor %}
  };

  struct PostOrderTransformer : public OrderedTransformer {
    Node *transform(NodeList *n) override;
{%- for node in nodes %}
    Node *transform({{ node.name }} *n) override;
{%- endfor %}
  };

  struct DefaultPreOrderTransformer : public PreOrderTransformer {
    Node *process(NodeList *n) override;
{%- for node in nodes %}
    Node *process({{ node.name }} *n) override;
{%- endfor %}
  };

  struct DefaultPostOrderTransformer : public PostOrderTransformer {
    Node *process(NodeList *n) override;
{%- for node in nodes %}
    Node *process({{ node.name }} *n) override;
{%- endfor %}
  };

// namespace Pop
}

#endif // POP_TRANSFORMER_HPP
