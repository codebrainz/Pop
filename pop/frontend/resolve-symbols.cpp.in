#ifdef HAVE_CONFIG_H
#include <pop/config.h>
#endif

#include <pop/frontend/resolve-symbols.hpp>
#include <pop/common/logger.hpp>
#include <pop/frontend/symbol-table.hpp>
#include <pop/ir/ast.hpp>
#include <pop/ir/ast-visitor.hpp>

#include <cassert>

namespace Pop {

  struct ResolveVisitor final : public VisitorBase {
    Logger log;
    ResolveVisitor(Logger &log) : log(log) {
    }
    template< class T >
    void resolve(T &n, const std::string &name) {
      auto scope = n.enclosing_scope;
      if (scope->is_defined(name)) {
        n.symbol = scope->lookup(name);
      } else {
        log.error(n.file(), n.line(), n.column(), "undefined symbol '%s'", name);
        n.symbol = nullptr;
      }
    }
{%- for node in nodes %}
  {%- if node.name == "Symbol" %}
    void visit({{ node.name }} &n) final {
      resolve(n, n.value);
    }
  {%- elif node.name == "Goto" %}
    void visit({{ node.name }} &n) final {
      resolve(n, n.label);
    }
  {%- else %}
    void visit({{ node.name }}&) final {
    }
  {%- endif %}
{%- endfor %}
  };

  void resolve_symbols(Node *root, Logger &log) {
    assert(root);
    ResolveVisitor visitor(log);
    root->accept(visitor);
  }

// namespace Pop
}
