<?xml version="0" encoding="utf-8"?>
<pop-data>
  <operators>
    <!-- unary operators -->
    <operator id="pos" name="positive" token="+" arity="1" />
    <operator id="neg" name="negative" token="-" arity="1" />
    <operator id="not" name="not" token="!" arity="1" />
    <operator id="compl" name="complement" token="~" arity="1" />
    <operator id="preinc" name="pre-increment" token="++" arity="1" />
    <operator id="predec" name="pre-decrement" token="--" arity="1" />
    <operator id="postinc" name="post-increment" token="++" arity="1" suffix="yes" />
    <operator id="postdec" name="post-decrement" token="--" arity="1" suffix="yes" />
    <!-- binary operators -->
    <operator id="add" name="addition" token="+" arity="2" />
    <operator id="sub" name="subtraction" token="-" arity="2" />
    <operator id="mul" name="multiplication" token="*" arity="2" />
    <operator id="div" name="division" token="/" arity="2" />
    <operator id="mod" name="modulo" token="%" arity="2" />
    <operator id="lshift" name="left shift" token="&lt;&lt;" arity="2" />
    <operator id="rshift" name="right shift" token="&gt;&gt;" arity="2" />
    <operator id="land" name="logical AND" token="&amp;&amp;" arity="2" />
    <operator id="lor" name="logical OR" token="||" arity="2" />
    <operator id="band" name="bitwise AND" token="&amp;" arity="2" />
    <operator id="bor" name="bitwise OR" token="|" arity="2" />
    <operator id="bxor" name="bitwise XOR" token="^" arity="2" />
    <operator id="le" name="less-than or equal-to" token="&lt;=" arity="2" />
    <operator id="ge" name="greater-than or equal-to" token="&gt;=" arity="2" />
    <operator id="lt" name="less-than" token="&lt;" arity="2" />
    <operator id="gt" name="greater-than" token="&gt;" arity="2" />
    <operator id="eq" name="equal-to" token="==" arity="2" />
    <operator id="ne" name="not equal-to" token="!=" arity="2" />
    <operator id="index" name="index" token="[]" arity="2" />
    <operator id="member" name="member" token="." arity="2" />
    <operator id="ptr_member" name="pointer member" token="-&gt;" arity="2" />
    <operator id="assign" name="assignment" token="=" arity="2" />
    <!-- binary in-place assignments -->
    <operator id="lshift_assign" name="left-shift assignment" token="&lt;&lt;=" arity="2" />
    <operator id="rshift_assign" name="right-shift assignment" token="&gt;&gt;=" arity="2" />
    <operator id="add_assign" name="addition assignment" token="+=" arity="2" />
    <operator id="sub_assign" name="subtraction assignment" token="-=" arity="2" />
    <operator id="mul_assign" name="multiplication assignment" token="*=" arity="2" />
    <operator id="div_assign" name="division assignment" token="/=" arity="2" />
    <operator id="mod_assign" name="modulo assignment" token="%=" arity="2" />
    <operator id="and_assign" name="bitwise AND assignment" token="&amp;=" arity="2" />
    <operator id="or_assign" name="bitwise OR assignment" token="|=" arity="2" />
    <operator id="xor_assign" name="bitwise XOR assignment" token="~=" arity="2" />
  </operators>
  <nodes>
    <node name="Null" atom="true" />
    <node name="Bool" atom="true">
      <field name="value" type="bool" default="false" />
    </node>
    <node name="Int" atom="true">
      <field name="value" type="long long int" default="0" />
    </node>
    <node name="Float" atom="true">
      <field name="value" type="long double" default="0.0" />
    </node>
    <node name="String" atom="true">
      <field name="value" type="std::string" />
    </node>
    <node name="Symbol" atom="true">
      <field name="value" type="std::string" />
      <field name="symbol" type="SymbolEntry*" construct="false" default="nullptr" />
    </node>
    <node name="Unary">
      <field name="op" type="Operator" default="Operator::NONE" />
      <field name="operand" />
    </node>
    <node name="Binary">
      <field name="op" type="Operator" default="Operator::NONE" />
      <field name="left" />
      <field name="right" />
    </node>
    <node name="IfExpr">
      <field name="predicate" />
      <field name="consequence" />
      <field name="alternative" />
    </node>
    <node name="Call">
      <field name="callee" />
      <field name="arguments" />
    </node>
    <node name="Function">
      <field name="parameters" />
      <field name="body" />
      <field name="scope" type="SymbolTable" construct="false" />
    </node>
    <node name="Block">
      <field name="statements" />
      <field name="scope" type="SymbolTable" construct="false" />
    </node>
    <node name="ExprStmt">
      <field name="expression" />
    </node>
    <node name="EmptyStmt" />
    <node name="Continue" />
    <node name="Break" />
    <node name="Return">
      <field name="expression" />
    </node>
    <node name="Goto">
      <field name="label" type="std::string" />
      <field name="symbol" type="SymbolEntry*" construct="false" default="nullptr" />
    </node>
    <node name="IfStmt">
      <field name="predicate" />
      <field name="consequence" />
      <field name="alternative" />
    </node>
    <node name="Case">
      <field name="expression" />
      <field name="body" />
      <field name="scope" type="SymbolTable" construct="false" />
    </node>
    <node name="Switch">
      <field name="expression" />
      <field name="cases" />
    </node>
    <node name="Do">
      <field name="body" />
      <field name="expression" />
    </node>
    <node name="While">
      <field name="expression" />
      <field name="body" />
    </node>
    <node name="For">
      <field name="initialize" />
      <field name="test" />
      <field name="increment" />
      <field name="body" />
    </node>
    <node name="Label">
      <field name="name" type="std::string" />
    </node>
    <node name="Variable">
      <field name="name" type="std::string" />
      <field name="initializer" />
    </node>
    <node name="Class">
      <field name="name" type="std::string" />
      <field name="members" />
      <field name="scope" type="SymbolTable" construct="false" />
    </node>
    <node name="Module">
      <field name="body" />
    </node>
    <node name="Program">
      <field name="modules" />
      <field name="scope" type="SymbolTable" construct="false" />
    </node>
  </nodes>
  <instructions>
    <!-- Misc instructions -->
    <node name="Halt" mnemonic="HLT" />
    <node name="Nop" mnemonic="NOP" />

    <!-- Stack manipulation -->
    <node name="PushConst" mnemonic="PUSH" size="5">
      <field name="const_id" type="int" construct="true" />
    </node>
    <node name="Pop" mnemonic="POP" />
    <node name="DuplicateTop" mnemonic="DUP" />
    <node name="Duplicate2ndTop" mnemonic="DUP2" />
    <node name="SwapTop" mnemonic="SWAP" />

    <!-- Environments -->
    <node name="Closure" mnemonic="CLSR" size="5">
      <field name="name" type="std::string" construct="true" />
      <field name="target" type="int" construct="false" default="-1" />
    </node>
    <node name="OpenEnvironment" mnemonic="OENV" />
    <node name="CloseEnvironment" mnemonic="CENV" />
    <node name="Bind" mnemonic="BIND" />
    <node name="Lookup" mnemonic="LKUP" />

    <!-- Branching -->
    <node name="Jump" mnemonic="JMP" size="5">
      <field name="label" type="std::string" />
      <field name="target" type="int" construct="false" default="-1" />
    </node>
    <node name="JumpIfTrue" mnemonic="JT" size="5">
      <field name="label" type="std::string" />
      <field name="target" type="int" construct="false" default="-1" />
    </node>
    <node name="JumpIfFalse" mnemonic="JF" size="5">
      <field name="label" type="std::string" />
      <field name="target" type="int" construct="false" default="-1" />
    </node>
    <node name="Call" mnemonic="CALL" />
    <node name="Return" mnemonic="RET" />

    <!-- Unary operations -->
    <node name="Positive" mnemonic="POS" />
    <node name="Negative" mnemonic="NEG" />
    <node name="LogicalNot" mnemonic="NOT" />
    <node name="BitwiseNot" mnemonic="CMPL" />
    <node name="Increment" mnemonic="INC" />
    <node name="Decrement" mnemonic="DEC" />

    <!-- Binary operations -->
    <node name="Add" mnemonic="ADD" />
    <node name="Subtract" mnemonic="SUB" />
    <node name="Multiply" mnemonic="MUL" />
    <node name="Divide" mnemonic="DIV" />
    <node name="Modulo" mnemonic="MOD" />
    <node name="LeftShift" mnemonic="LSH" />
    <node name="RightShift" mnemonic="RSH" />
    <node name="LogicalAnd" mnemonic="LAND" />
    <node name="LogicalOr" mnemonic="LOR" />
    <node name="BitwiseAnd" mnemonic="AND" />
    <node name="BitwiseOr" mnemonic="OR" />
    <node name="BitwiseXor" mnemonic="XOR" />
    <node name="LessThan" mnemonic="LT" />
    <node name="GreaterThan" mnemonic="GT" />
    <node name="LessOrEqual" mnemonic="LE" />
    <node name="GreaterOrEqual" mnemonic="GE" />
    <node name="Equal" mnemonic="EQ" />
    <node name="NotEqual" mnemonic="NE" />
    <node name="Index" mnemonic="IDX" />
    <node name="Member" mnemonic="MEM" />

    <!-- Pseudo instructions -->
    <node name="Label" mnemonic="LBL" size="0">
      <field name="name" type="std::string" />
    </node>
    <node name="Comment" mnemonic="COM" size="0">
      <field name="text" type="std::string" />
    </node>
    <node name="Line" mnemonic="LINE" size="0">
      <field name="file" type="std::string" />
      <field name="line" type="int" />
      <field name="column" type="int" />
    </node>
  </instructions>
</pop-data>
