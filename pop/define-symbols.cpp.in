#ifdef HAVE_CONFIG_H
#include <pop/config.h>
#endif

#include <pop/define-symbols.hpp>
#include <pop/ast.hpp>
#include <pop/logger.hpp>
#include <pop/symbol-table.hpp>
#include <pop/visitor.hpp>

#include <cassert>
#include <vector>

namespace Pop {

  struct DefineVisitor : public VisitorBase {
    Logger &log;
    std::vector<SymbolTable*> scope_stack;
    DefineVisitor(Logger &log) : log(log) {
    }
    template<class T >
    void begin_scope(T &n) {
      n.scope.parent = current_scope();
      n.scope.owner = &n;
      scope_stack.push_back(&n.scope);
    }
    template<class T>
    void end_scope(T &n) {
      assert(!scope_stack.empty());
      (void)n;
      assert(&n.scope == scope_stack.back());
      scope_stack.pop_back();
    }
    SymbolTable *current_scope() const {
      if (!scope_stack.empty())
        return scope_stack.back();
      return nullptr;
    }
    template< class T >
    void define(T &n) {
      assert(!scope_stack.empty());
      if (!current_scope()->define(n.name, &n)) {
        log.error(n.file(), n.line(), n.column(),
          "multiple definitions of symbol '%'", n.name);
      }
    }
{%- for node in nodes %}
    void visit({{ node.name }} &n) final {
      n.enclosing_scope = current_scope();
  {%- if node.name in [ "Label", "Variable", "Class" ] %}
      define(n);
  {%- endif %}
  {%- if node.has_scope and node.child_fields | length > 0 %}
      begin_scope(n);
    {%- for field in node.child_fields %}
      if (n.{{ field.name }})
        n.{{ field.name }}->accept(*this);
    {%- endfor %}
      end_scope(n);
  {%- endif %}
  }
{%- endfor %}
  };

  void define_symbols(Node *root, Logger &log) {
    DefineVisitor visitor(log);
    root->accept(visitor);
  }

  // namespace Pop
}
